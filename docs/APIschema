openapi: 3.0.0
info:
  description: MTAA project by Lubomir Majercik and Denis Mokos
  version: 1.0.0
  title: Weather Report API
tags:
  - name: reports
    description: Report operations
  - name: users
    description: User operations
  - name: georeports
    description: Operations with an array of reports based on current mapview
paths:
  /georeports:
    get:
      tags:
        - georeports
      summary: searches system for an array of reports based on current mapview
      operationId: searchReport
      description: "Returns submitted reports from mapview"
      parameters:
        - in: query
          name: SWlat
          description: latitude of the southwest corner of user's mapview
          required: true
          example: 48.57442
          schema:
            type: number
            format: double
        - in: query
          name: SWlong
          description: longitude of the southwest corner of user's mapview
          required: true
          example: 19.15324
          schema:
            type: number
            format: double
        - in: query
          name: NElat
          description: latitude of the northeast corner of user's mapview
          required: true
          example: 59.30361
          schema:
            type: number
            format: double
        - in: query
          name: NElong
          description: longitude of the northeast corner of user's mapview
          required: true
          example: 24.41306
          schema:
            type: number
            format: double

      responses:
        '200':
          description: array of reports matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        '400':
          description: bad input parameter
        '404':
          description: 'no reports matching criteria'
  /reports:
    post:
      tags:
        - reports
      summary: adds a report
      operationId: addReport
      description: Adds a report to the system
      responses:
        '201':
          description: report created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
        description: Report object to add
  /reports/{report_id}:
    put:
      tags:
        - reports
      summary: "Update an existing report"
      operationId: "updateReport"
      description: ""
      parameters:
        - name: "report_id"
          in: "path"
          description: "report ID to edit"
          required: true
          schema:
            type: "integer"
      requestBody:
        description: "the whole report object to update"
        required: true
        content:
          'application/json':
            schema:
               $ref: "#/components/schemas/Report"
      responses:
        "204":
          description: "report updated"
        "400":
          description: "invalid ID input"
        "404":
          description: "report not found"
    
    delete:
      tags:
        - reports
      summary: "deletes report by ID"
      operationId: "deleteReport"
      description: ""
      parameters:
      - name: "report_id"
        in: "path"
        description: "report id to delete"
        required: true
        schema:
          type: "integer"
      responses:
        "204":
          description: "report deleted"
        "400":
          description: "invalid ID input"
        "404":
          description: "report not found"
  /reports/{user_id}:
    get:
        tags:
          - reports
        summary: "searches report by owner"
        description: "Returns a report by owner"
        operationId: "getReportByOwner"
        parameters:
        - name: "user_id"
          in: "path"
          description: "user ID to find his report"
          required: true
          schema:
            type: "string"
        responses:
          "200":
            description: "Report found"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Report"
          "400":
            description: "Invalid ID supplied"
          "404":
            description: "Report not found"
  
  /users:
    post:
      tags:
        - users
      summary: "Adds a user to the system"
      operationId: "addUser"
      description: "Adds a user to the system"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User object to add
      responses:
        '201':
          description: "user created"
        '400':
          description: "invalid input, object invalid"
        '409':
          description: "an existing item already exists"
  /users/{user_id}:
    get:
      tags:
        - users
      summary: "searches user by ID"
      description: "Returns a user by ID"
      operationId: "getUserById"
      parameters:
      - name: "user_id"
        in: "path"
        description: "user ID to find"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "User found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "User not found"
  /login:
    post:
      tags:
        - users
      summary: "logs the user in"
      operationId: "loginUser"
      description: "logs the user in"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        description: Username and password
      responses:
        '500':
          description: "server error"
        '201':
          description: "user created"
        '400':
          description: "invalid input, object invalid"
        '401':
          description: "not authenticated"
  /logout:
    get:
      tags:
        - users
      summary: "logs the user out"
      operationId: "logoutUser"
      description: "logs the user out"
      responses:
        '200':
          description: "logged out"
        '401':
          description: "not authenticated"
  /me:
    get:
      tags:
        - users
      summary: "gets current user's id"
      operationId: "currentUser"
      description: "gets current user's id"
      responses:
        '200':
          description: "returning id"
        '500':
          description: "server error"
        '401':
          description: "not authenticated"
components:
  schemas:
    Login:
      required: 
        - password
        - username
      properties:
        password:
          type: "string"
          format: "password"
          example: "mrkvicka55"
        username:
          type: "string"
          example: "JozkoM"
    User:
      required: 
        - user_id
        - email
        - password
        - nickname
      properties:
        user_id:
          type: "string"
          format: "uuid"
          example: "10cb7c12-34c1-47d3-adb6-a41ab448ea28"
        email:
          type: "string"
          format: "email"
          example: "jozko.mrkvicka@example.com"
        password:
          type: "string"
          format: "password"
          example: "********"
        username:
          type: "string"
          example: "JozkoM"
    Report:
      required: 
        - report_id
        - user_id
        - characteristic
        - coordinates
        - location
        - uploadTime
      properties:
        report_id:
          type: "string"
          format: "uuid"
          example: "4ea60c91-62e5-481b-b9c5-d2bb3a3a4b2a"
        user_id:
          type: "string"
          format: "uuid"
          example: "10cb7c12-34c1-47d3-adb6-a41ab448ea28"
        characteristic:
          type: "string"
          example: "Cloudy"
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        location:
          type: "string"
          example: "Bratislava"
        uploadTime:
          type: "string"
          format: "date-time"
          example: '2016-08-29T09:12:33.001Z'
        description:
          type: "string"
          example: "Very dark clouds :O might rain soon"
        photo:
          type: "string"
          format: "binary"
          example:   
    Coordinates:
      required:
        - lat
        - long
      properties:
        lat:
          type: "number"
          example: 56.6874
        long: 
          type: "number"
          example: 37.5547
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: localhost:3000